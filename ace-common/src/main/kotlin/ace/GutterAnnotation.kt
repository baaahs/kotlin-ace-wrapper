package ace

/**
 * Gutter annotation are displayed next to line numbers and typically indicate some general
 * problem in the specific line.
 *
 * We consider them a part of the common module, because they are often generated by workers
 * and maintained by web interface. They are not actual classes but only external interfaces,
 * because kotlin classes won't survive serialisation between worker and web environments.
 */
external interface GutterAnnotation {

    /**
     * Gives the line index of the problematic line.
     */
    @JsName("row")
    val row: Int

    /**
     * Specifies the type of the annotation. Can be either "error", "warning", "info" or null (none).
     */
    @JsName("type")
    val type: String?

    /**
     * Gives the text to be displayed in the tooltip for the annotation. This text will be escaped.
     * Alternatively,  you can specify a HTML string using [html].
     */
    @JsName("text")
    val text: String?

    /**
     * Gives a html to be displayed inside the tooltip for the annotation.
     */
    @JsName("html")
    val html: String?

}

/**
 * Enum for representing [GutterAnnotation] types.
 * (It is not used by Ace, we use it internally inside wrapper APIs.
 */
enum class AnnotationType(val string: String) {
    ERROR("error"), WARNING("warning"), INFO("info");
}

/**
 * Convenience method for creating anonymous gutter annotations. Note that for most purposes, you can simply override
 * [GutterAnnotation] and call it a day, but if you also want to serialize the instances, you have to
 * make sure the fields have correct JS names. If you override gutter annotation, the interface fields
 * will be added as getters, which will be stripped away during serialisation. This way, the values are really
 * fields.
 */
// they are not unused, they are used by the external interface
// the unchecked cast is, unfortunately, ok
// and the cas always succeeds, because it only checks if the value is na object
@Suppress("unused", "UNCHECKED_CAST_TO_EXTERNAL_INTERFACE", "CAST_NEVER_SUCCEEDS")
fun makeGutterAnnotation(row: Int, type: AnnotationType? = null, text: String? = null, html: String? = null)
        = object {
    @JsName("row")
    val row: Int = row
    @JsName("type")
    val type: String? = type?.string
    @JsName("text")
    val text: String? = text
    @JsName("html")
    val html: String? = html
} as GutterAnnotation