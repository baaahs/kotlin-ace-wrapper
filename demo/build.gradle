apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlin2js'

// This property points to the folder where the project should be deployed.
// Note: The directory should be outside of this project, because otherwise every deploy
// will cause a project reindex (tons of new .js files)
ext.web_dir = "${System.getProperty("user.home")}/www/${rootProject.name}/"

repositories {

}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    implementation 'com.github.daemontus.kotlin-ace-wrapper:ace-web:f524ef8629'

    // Main ace-wrapper, contains declarations of all important Ace classes.
    //compileOnly project(":ace-web")

    // Worker module is not visible from the main module, but we want to include the worker scripts
    // anyway, therefore we have to include id as runtime dependency.
    //runtime project(":demo-worker")
}


/*
clean.doFirst {
    delete(web_dir)
}*/

compileKotlin2Js {
    kotlinOptions {
        moduleKind = "commonjs"
        sourceMap = true
        sourceMapEmbedSources = "always"
        metaInfo = true
        outputFile = "$project.buildDir.path/js/${project.name}.js"
        main = "call"
    }
}

kotlinFrontend {
    npm {
        dependency("ace-builds", "1.3.3")
        dependency("kotlin-ace-loader", "1.0.1")
        dependency("kotlin-ace-common", "1.3.33")
        dependency("kotlin-ace-web", "1.3.33")
    }
    webpackBundle {
        bundleName = "main"
    }
}

/*
task deploy(dependsOn: 'build') {
    doLast {
        copy {  // copy compiled code into lib folder
            from new File("$buildDir/classes/kotlin/main")
            into "${web_dir}/lib"
        }
        // copy dependencies into lib, each into a special subfolder
        (configurations.compile + configurations.runtime).each { File file ->
            copy {
                from zipTree(file.absolutePath)
                into "${web_dir}/lib/${file.name.replaceFirst(~/\.[^\\.]+$/, '')}/"
                include { element ->
                    def path = element.path
                    path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
                }
            }
        }
        copy {  // copy resources directly into web root
            from new File("$buildDir/resources/main")
            into web_dir
        }
    }
}*/